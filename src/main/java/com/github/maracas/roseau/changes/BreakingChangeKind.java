package com.github.maracas.roseau.changes;

/**

 * <ul>
 *   <li>CLASS_NO_LONGER_PUBLIC: subset of CLASS_LESS_ACCESSIBLE</li>
 *   <li>METHOD_ADDED_TO_PUBLIC_CLASS: compatible change</li>
 *   <li>METHOD_ABSTRACT_ADDED_IN_IMPLEMENTED_INTERFACE: compatible change</li>
 *   <li>METHOD_REMOVED_IN_SUPERCLASS: super-type changes are redundant</li>
 *   <li>FIELD_LESS_ACCESSIBLE_THAN_IN_SUPERCLASS: super-type changes are redundant</li>
 *   <li>FIELD_REMOVED_IN_SUPERCLASS: super-type changes are redundant</li>
 *   <li>METHOD_ABSTRACT_ADDED_IN_SUPERCLASS: super-type changes are redundant</li>
 *   <li>METHOD_DEFAULT_ADDED_IN_IMPLEMENTED_INTERFACE: super-type changes are redundant</li>
 * </ul>
 *
 * @return the default options
 *
public static MaracasOptions newDefault() {
		MaracasOptions opts = new MaracasOptions(defaultJApiOptions());

		// CLASS_NO_LONGER_PUBLIC is just a subset of CLASS_LESS_ACCESSIBLE
		opts.excludeBreakingChange(JApiCompatibilityChange.CLASS_NO_LONGER_PUBLIC);

		// We don't care about source- and binary-compatible changes (except ADA...)
		opts.excludeBreakingChange(JApiCompatibilityChange.METHOD_ADDED_TO_PUBLIC_CLASS);
		opts.excludeBreakingChange(JApiCompatibilityChange.METHOD_ABSTRACT_ADDED_IN_IMPLEMENTED_INTERFACE);

		// We don't care about super-type changes as they're just redundant
		opts.excludeBreakingChange(JApiCompatibilityChange.METHOD_REMOVED_IN_SUPERCLASS);
		opts.excludeBreakingChange(JApiCompatibilityChange.FIELD_LESS_ACCESSIBLE_THAN_IN_SUPERCLASS);
		opts.excludeBreakingChange(JApiCompatibilityChange.FIELD_REMOVED_IN_SUPERCLASS);
		opts.excludeBreakingChange(JApiCompatibilityChange.METHOD_ABSTRACT_ADDED_IN_SUPERCLASS);
		opts.excludeBreakingChange(JApiCompatibilityChange.METHOD_DEFAULT_ADDED_IN_IMPLEMENTED_INTERFACE);

		return opts;
		}
		**/


public enum BreakingChangeKind {
	ANNOTATION_DEPRECATED_ADDED,
	CLASS_REMOVED,
	CLASS_NOW_ABSTRACT,
	CLASS_NOW_FINAL,
	CLASS_TYPE_CHANGED,
	CLASS_NOW_CHECKED_EXCEPTION,
	CLASS_LESS_ACCESSIBLE,
	CLASS_GENERIC_TEMPLATE_CHANGED,    //
	CLASS_GENERIC_TEMPLATE_GENERICS_CHANGED,   //
	SUPERCLASS_MODIFIED_INCOMPATIBLE,  //
	INTERFACE_REMOVED,



	METHOD_REMOVED,
	METHOD_LESS_ACCESSIBLE,
	METHOD_LESS_ACCESSIBLE_THAN_IN_SUPERCLASS,
	METHOD_IS_STATIC_AND_OVERRIDES_NOT_STATIC,
	METHOD_IS_NOT_STATIC_AND_OVERRIDES_STATIC,
	METHOD_RETURN_TYPE_CHANGED,
	METHOD_RETURN_TYPE_GENERICS_CHANGED,
	METHOD_PARAMETER_GENERICS_CHANGED,
	METHOD_NOW_ABSTRACT,
	METHOD_NOW_FINAL,
	METHOD_NOW_STATIC,
	METHOD_NO_LONGER_STATIC,
	METHOD_NOW_VARARGS,
	METHOD_NO_LONGER_VARARGS,
	METHOD_ADDED_TO_INTERFACE,
	METHOD_NOW_THROWS_CHECKED_EXCEPTION,
	METHOD_NO_LONGER_THROWS_CHECKED_EXCEPTION,
	METHOD_ABSTRACT_ADDED_TO_CLASS,
	METHOD_NEW_DEFAULT,    // Not taking this into account
	METHOD_MOVED_TO_SUPERCLASS,
	METHOD_ABSTRACT_NOW_DEFAULT,


	FIELD_STATIC_AND_OVERRIDES_NON_STATIC,
	FIELD_NON_STATIC_AND_OVERRIDES_STATIC,
	FIELD_LESS_ACCESSIBLE_THAN_IN_SUPERCLASS,
	FIELD_NOW_FINAL,
	FIELD_NOW_STATIC,
	FIELD_NO_LONGER_STATIC,
	FIELD_TYPE_CHANGED,
	FIELD_REMOVED,
	FIELD_LESS_ACCESSIBLE,
	FIELD_GENERICS_CHANGED,


	CONSTRUCTOR_REMOVED,
	CONSTRUCTOR_LESS_ACCESSIBLE
}
